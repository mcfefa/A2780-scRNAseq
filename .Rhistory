}
# Specify the filename for the RDS file, including the automated date
rds_filename <- paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep2_", ".rds")
# Construct the full path for the RDS file within the 'Process_data' folder
full_rds_path <- file.path(process_data_folder_path, rds_filename)
# Save the Seurat object as an RDS file in the specified location
saveRDS(A2780S, file = full_rds_path)
# Visualize QC metrics as a violin plot
VlnPlot(A2780S, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3)
A2780S <- NormalizeData(object=A2780S, normalization.method="LogNormalize", scale.factor=1e4)
dim(A2780S)
# 33538  3449
# Specify the filename for the RDS file, including the automated date and step identifier
rds_filename <- paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep3_", ".rds")
# Construct the full path for the RDS file within the 'Process_data' folder
full_rds_path <- file.path(process_data_folder_path, rds_filename)
# Save the Seurat object as an RDS file in the specified location
saveRDS(A2780S, file = full_rds_path)
# FindVariableFeatures calculates the average expression and dispersion for each gene, places these genes into bins and calculates a z-score for dispersion within each bin
A2780S <- FindVariableFeatures(object=A2780S, selection.method = 'mean.var.plot',
mean.cutoff = c(0.0125, 3), # x-axis, gene expression
dispersion.cutoff = c(0.5, Inf), #y-axis
do.plot=TRUE)
length(x = VariableFeatures(object=A2780S))
## number of variable features detected after filtering, normalization: 8257
VariableFeaturePlot(A2780S)
rds_filename <- paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep4_", ".rds")
full_rds_path <- file.path(process_data_folder_path, rds_filename)
saveRDS(A2780S, file = full_rds_path)
#Seurat scale data function already does all these things for use, we only want to scale certain variables
A2780S <- ScaleData(object=A2780S, vars.to.regress = c("nCount_RNA","percent.mito"))
rds_filename <- paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep5_", ".rds")
full_rds_path <- file.path(process_data_folder_path, rds_filename)
saveRDS(A2780S, file = full_rds_path)
#Get the principal components, Seurat selects the most variable and orders them, we have to decide what PC we will be working with
A2780S <- RunPCA(object=A2780S, features=VariableFeatures(object=A2780S), verbose = TRUE, npcs = 200)
A2780S <- ProjectDim(object=A2780S)
DimPlot(A2780S,reduction="pca")
rds_filename <- paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep6_",".rds")
full_rds_path <- file.path(process_data_folder_path, rds_filename)
saveRDS(A2780S, file = full_rds_path)
A2780S@reductions$pca
ElbowPlot(A2780S,ndims = 200)
# Load the Seurat object
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep6_.rds")
# Run JackStraw to determine statistically significant principal components
A2780S <- JackStraw(A2780S, dims = 50, num.replicate = 100)
# Score JackStraw to apply statistical testing to the PCS
A2780S <- ScoreJackStraw(A2780S, dims = 1:50)
# Generate the JackStraw plot for the first 50 dimensions
jackStrawPlot <- JackStrawPlot(A2780S, dims = 1:50)
# Define the path for saving the plot
plot_path <- "/Users/fin/Desktop/A2780S/Process_data/jackStrawPlot.png"
# Save the JackStraw plot
ggsave(filename = plot_path, plot = jackStrawPlot, width = 10, height = 8, dpi = 300)
library(data.table)
library(dplyr)
library(clustree)
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep6_.rds") # Ensure full_rds_path is correctly defined earlier in your script
# Define the name of the new folder for clustree plots
clustree_folder_name <- "clustree"
# Construct the full path for the clustree folder
clustree_folder_path <- file.path(base_dir, clustree_folder_name)
# Create the clustree folder if it doesn't exist
if (!dir.exists(clustree_folder_path)) {
dir.create(clustree_folder_path, recursive = TRUE)
}
# Define the range of resolutions to scan
range <- seq(0, 1, by = 0.05)
# Loop through each resolution
for (res in range) {
A2780S <- FindNeighbors(object = A2780S, dims = 1:50)  # Use 50 principal components
A2780S <- FindClusters(object = A2780S, resolution = res, n.start = 100)  # Louvain clustering
}
# Generate and save the clustree plot
# Construct the full path for the clustree plot, including the current date
clustree_plot_path <- file.path(clustree_folder_path, paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_clustree_ResScan_",".pdf"))
# Open a PDF device to save the clustree plot
pdf(clustree_plot_path, width = 15, height = 24)
# Generate the clustree plot
tPlot <- clustree(A2780S, prefix = 'RNA_snn_res.')
print(tPlot)
# Close the PDF device
dev.off()
rds_filename <- paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep7_", ".rds")
full_rds_path <- file.path(process_data_folder_path, rds_filename)
saveRDS(A2780S, file = full_rds_path)
# Base dir
base_dir <- "/Users/fin/Desktop/A2780S/"
# Define the name of the new folder
new_subfolder_name <- "Process_data"
# Construct the full path for the 'Process_data' folder
process_data_folder_path <- file.path(base_dir, new_subfolder_name)
umap_folder_name <- "UMAP"
# Construct the full path for the UMAP folder
umap_folder_path <- file.path(base_dir, umap_folder_name)
# Create the UMAP folder if it doesn't exist
if (!dir.exists(umap_folder_path)) {
dir.create(umap_folder_path, recursive = TRUE)
}
# Read the Seurat object
A2780S.F <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep7_.rds") # Ensure full_rds_path is correctly defined earlier in your script
# Find Clusters at a specific resolution
clustree_resolution = 0.15
A2780S <- FindClusters(object = A2780S.F, resolution = clustree_resolution, n.start = 100) #res select from clustree
# Find all markers
A2780S.markers <- FindAllMarkers(A2780S, min.pct = 0.25, logfc.threshold = 0.25)
# Run UMAP with PCA reduction and specified dimensions
A2780S <- RunUMAP(object = A2780S, reduction = "pca", dims = 1:50)
# Generate and save UMAP plot by cluster
pdf_path_cluster <- file.path(umap_folder_path, paste0("A2780S_S+R_QC-Subset-Cohort_UMAP_byCluster_",clustree_resolution, ".pdf"))
pdf(pdf_path_cluster, width=12, height=8)
dPlot <- DimPlot(A2780S, reduction = "umap") + xlim(-15, 15) + ylim(-15, 15)
print(dPlot)
dev.off()
# Generate and save UMAP plot by cell type
pdf_path_celltype <- file.path(umap_folder_path, paste0("A2780S_S+R_QC-Subset-Cohort_UMAP_clustersByType_", ".pdf"))
pdf(pdf_path_celltype, width=12, height=8)
dPlot <- DimPlot(A2780S, reduction = "umap", group.by = 'orig.ident') + xlim(-15, 15) + ylim(-15, 15)
print(dPlot)
dev.off()
# Save the modified Seurat object
rds_path <- file.path(process_data_folder_path, paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep8_", ".rds"))
saveRDS(A2780S, file = rds_path)
DimPlot(A2780S, reduction = "umap")
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep8_.rds")
listNames <- A2780S@meta.data$orig.ident
# Create a data frame without column name
df <- data.frame(listNames = listNames, stringsAsFactors = FALSE)
# Define the output file path
output_file_path <- "/Users/fin/Desktop/A2780S/UMAP/A2780SOutputDataNames.csv"
# Save the list to a CSV file without row names and column names
write.csv(df, file = output_file_path, row.names = FALSE, col.names = FALSE, sep=",")
# Replace 'seurat_clusters' with the actual column name if it's different
cluster_assignments <- A2780S@meta.data$seurat_clusters
# Create a data frame of cluster assignments
df_clusters <- data.frame(cluster = cluster_assignments)
# Define the output file path for the cluster assignments CSV
output_file_path <- "/Users/fin/Desktop/A2780S/UMAP/A2780SClusterAssignments.csv"
# Save the cluster assignments to a CSV file
write.csv(df_clusters, file = output_file_path, row.names = FALSE, quote = FALSE)
# Read the CSV files
mydat1 <- fread("/Users/fin/Desktop/A2780S/UMAP/A2780SClusterAssignments.csv")
mydat2 <- fread("/Users/fin/Desktop/A2780S/UMAP/A2780SOutputDataNames.csv")
# Merge the two data tables by columns
fulldat <- cbind(UMI = mydat2[[1]], cluster = mydat1[[1]])
# Convert the merged data into a data table if not already
fulltab <- as.data.table(fulldat, stringsAsFactors = FALSE)
# name table columns
names(fulltab)[1] <- paste("UMI")
names(fulltab)[2] <- paste("cluster")
print(fulltab)
# From fulltab, group by cluster then count number in each cluster
# create a table counting unique UMIs/cells per cluster
tabPerClus <- fulltab %>%
group_by(UMI, cluster) %>%
summarise(count = n(), .groups = 'drop')
divout <-  "/Users/fin/Desktop/A2780S/UMAP/CellBreakdown_PerClusterPerType.csv"
write.csv(tabPerClus, file=divout)
print(tabPerClus)
# Store cell names
cell_names <- colnames(A2780S)
# Define the GeneList folder path within the base directory
gene_list_dir <- file.path(base_dir, "GeneList")
# Create the GeneList directory if it doesn't exist
if (!dir.exists(gene_list_dir)) {
dir.create(gene_list_dir, recursive = TRUE)
}
# Save the complete marker list with the automated date
write.csv(A2780S.markers, file.path(gene_list_dir, paste0("DiffExpGeneList_A2780S_ALL_", ".csv")))
# Iterate over each cluster and save the differentially expressed gene list in the GeneList folder
unique_clusters <- unique(A2780S.markers$cluster)
for (cluster in unique_clusters) {
# Filter markers for the current cluster
clus_markers <- A2780S.markers %>%
filter(cluster == cluster) %>%
select(avg_log2FC, gene)
# Define the file path for this cluster's gene list, including the GeneList directory
file_path <- file.path(gene_list_dir, paste0("DiffExpGeneList_A2780S_Cluster-", cluster, "_", ".csv"))
# Save the filtered gene list to the CSV file
write.csv(clus_markers, file_path, row.names = FALSE)
}
base_plot_dir = "/Users/fin/Desktop/A2780S/Feature_Plots"
# Check and create the base directory if it does not exist
if (!dir.exists(base_plot_dir)) {
dir.create(base_plot_dir, recursive = TRUE)
}
# Find the top 15 markers based on avg_log2FC for each cluster
top15 <- A2780S.markers %>%
group_by(cluster) %>%
top_n(n = 5, wt = avg_log2FC)
# Write the data to a CSV file
write.csv(top15, paste0(base_plot_dir, "/top15_markers_resolution_", clustree_resolution, ".csv"), row.names = FALSE)
# Generate a DotPlot for the top genes
plot <- DotPlot(object = A2780S, features = unique(top15$gene), assay = "RNA") + coord_flip()
# Create a specific folder for this resolution
resolution_folder <- file.path(base_plot_dir, paste0("Resolution_", clustree_resolution))
# Check if the directory exists; if not, create it
if (!dir.exists(resolution_folder)) {
dir.create(resolution_folder, recursive = TRUE)
}
# Save the DotPlot to the resolution-specific folder
dotplot_filename <- file.path(resolution_folder, paste0("top_genes_dotplot_res", clustree_resolution, ".png"))
ggsave(dotplot_filename, plot = plot, width = 10, height = 8, dpi = 300)
# Loop through each gene in top15 to create and save a feature plot
for (gene in unique(top15$gene)) {
p <- FeaturePlot(object = A2780S, features = gene) + NoLegend() + ggtitle(gene)
# Construct the file path, including the resolution folder and file name
feature_plot_filename <- file.path(resolution_folder, paste0("feature_plot_", gene, ".png"))
# Save the plot to the file in the resolution-specific folder
ggsave(feature_plot_filename, plot = p, width = 8, height = 6, dpi = 300)
}
# Load the Seurat object
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep8_.rds")
# assay name (verify this is correct)
matrix <- GetAssayData(object = A2780S, slot = "scale.data")
View(matrix)
#data: This slot usually contains the normalized data. Normalization is done to account for differences in sequencing depth across cells and other technical factors. Normalized data is important for accurate comparison between cells.
matrix1 <- as.data.frame(matrix)
# Define the directory for saving outputs
metadir1 <- "/Users/fin/Desktop/A2780S/"
# Define the new subfolder for trajectory analysis within the base directory
trajectory_folder <- file.path(metadir1, "Trajectory")
# Check if the trajectory directory exists; if not, create it
if (!dir.exists(trajectory_folder)) {
dir.create(trajectory_folder, recursive = TRUE)
}
# Paths for the files to be saved in the new "Trajectory" folder
csv_path <- file.path(trajectory_folder, "CORRECTcountmatrix.csv")
rds_path <- file.path(trajectory_folder, "CORRECTcountmatrix.rds")
# Save the dataframe as CSV
fwrite(matrix1, file = csv_path, row.names = TRUE, col.names = TRUE)
# Save the dataframe as RDS
saveRDS(matrix1, file = rds_path)
# Write data as TSV for compatibility with other tools
fwrite(matrix1, file = file.path(trajectory_folder, "CORRECTcountmatrix.tsv"), row.names = TRUE, col.names = TRUE)
# Define the directory for saving specific outputs
metadir2 <- '/Users/fin/Desktop/A2780S/Trajectory'
# Assuming '3449' is the correct number of columns for A2780S specific data
dim(A2780S) #[1] 33538  3449
A2780S_matrix <- matrix1[, 1:3449]
fwrite(A2780S_matrix, file = file.path(metadir2, "CORRECTcountmatrix.csv"), row.names = TRUE, col.names = TRUE)
fwrite(A2780S_matrix, file = file.path(metadir2, "CORRECTcountmatrix.tsv"), row.names = TRUE, col.names = TRUE)
# Transpose the matrix and convert it to a data frame
matrix1.t <- t(matrix1)
matrix2.t <- as.data.frame(matrix1.t)
# Extract the cluster labels from the Seurat object's metadata
A2780S_clusters <- A2780S@meta.data[["seurat_clusters"]]  # Adjust if using a different name for Seurat object or clusters
# Combine the transposed data frame with cluster labels
A2780Scountmatrix <- cbind(matrix2.t, seurat_clusters = A2780S_clusters)
# Define the directory for saving outputs
metadir1 <- "/Users/fin/Desktop/A2780S/Trajectory/"  # Adjust as necessary, perhaps to include a subdirectory
# Save the combined dataframe as CSV
csv_path <- file.path(metadir1, "countmatrix_with_clusters.csv")
fwrite(A2780Scountmatrix, file = csv_path, row.names = TRUE, col.names = TRUE)
fwrite(matrix2.t, file =file.path(metadir1, "Normalize_express.csv" ),row.names = TRUE, col.names = TRUE)
View(matrix2.t)
# Extract the names and clusters from the metadata of the Seurat object
A2780S_names <- A2780S@meta.data[0]
A2780S_clusters <- A2780S@meta.data[["seurat_clusters"]]  # Ensure this is the correct metadata column for clusters
# Combine the names and cluster labels
A2780S_names_and_clusters <- cbind(A2780S_names, seurat_clusters = A2780S_clusters)
# Convert to a data frame
A2780S_names_and_clusters_df <- as.data.frame(A2780S_names_and_clusters)
# Define the directory for saving outputs
metadir1 <- "/Users/fin/Desktop/A2780S/Trajectory/"  # Assuming you want it saved in the Trajectory folder
# Save the dataframe as CSV
csv_path <- file.path(metadir1, "names_and_clusters.csv")
fwrite(A2780S_names_and_clusters_df, file = csv_path, row.names = TRUE, col.names = TRUE)
library(monocle3)
library(SeuratWrappers)
# convert seurant obj to cell_data_set (cds) object for monocle3
# Get Marker and save file
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep7_.rds")
clustree_resolution = 0.15
A2780S <- FindClusters(object = A2780S.F, resolution = clustree_resolution, n.start = 100) #res select from clustree
A2780S.markers <- FindAllMarkers(A2780S, min.pct = 0.25, logfc.threshold = 0.25)
saveRDS(A2780S.markers, "/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_marker.rds")
# Get marker into data frame
A2780S_marker <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_marker.rds")
marker_matrix <- as.data.frame(A2780S_marker)
# Get cell meta data
A2780S_meta <- A2780S@meta.data
# Unprocess data load
Unprocess_data <- readRDS("/Users/fin/Desktop/A2780S/Unprocessed_data/A2780S-CT_S+R_UnprocessedCohort_SeuratObj_.rds")
Unprocess_data <- Unprocess_data@meta.data
# Get Cell expression data
A2780S_expression <- read.csv("/Users/fin/Desktop/A2780S/Trajectory/CORRECTcountmatrix.csv")
# Create Seurant Object
seu.obj <- CreateSeuratObject(counts = A2780S_expression)
# convert seurant obj to cell_data_set (cds) object for monocle3
cds <- as.cell_data_set(A2780S)
#https://training.galaxyproject.org/training-material/topics/single-cell/tutorials/scrna-case_monocle3-rstudio/tutorial.html#trajectory-inference
# Create a uniform partition label for all cells
reacreate.partition <- rep(1, length(cds@colData@rownames))
names(reacreate.partition) <- rownames(cds@colData)
reacreate.partition <- as.factor(reacreate.partition)
# Update the cds object with the new partition label
# Check if the structure of your object supports this assignment
cds@clusters$UMAP$partitions <- reacreate.partition
lsit_cluster <- A2780S@active.ident # This retrieves the active identity classes (clusters)
# Assign cluster labels from 'lsit_cluster' to the UMAP cluster information slot within the 'cds' object.
# This integrates clustering results directly with the UMAP dimensionality reduction in the 'cds' data structure,
# allowing for enhanced visualization and analysis of clusters based on UMAP coordinates.
cds@clusters$UMAP$clusters <- lsit_cluster
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
lsit_cluster <- A2780S@active.ident # This retrieves the active identity classes (clusters)
# Assign cluster labels from 'lsit_cluster' to the UMAP cluster information slot within the 'cds' object.
# This integrates clustering results directly with the UMAP dimensionality reduction in the 'cds' data structure,
# allowing for enhanced visualization and analysis of clusters based on UMAP coordinates.
cds@clusters$UMAP$clusters <- lsit_cluster
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
lsit_cluster <- A2780S@active.ident # This retrieves the active identity classes (clusters)
# Assign cluster labels from 'lsit_cluster' to the UMAP cluster information slot within the 'cds' object.
# This integrates clustering results directly with the UMAP dimensionality reduction in the 'cds' data structure,
# allowing for enhanced visualization and analysis of clusters based on UMAP coordinates.
cds@clusters$UMAP$clusters <- lsit_cluster
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
lsit_cluster <- A2780S@active.ident # This retrieves the active identity classes (clusters)
# Assign cluster labels from 'lsit_cluster' to the UMAP cluster information slot within the 'cds' object.
# This integrates clustering results directly with the UMAP dimensionality reduction in the 'cds' data structure,
# allowing for enhanced visualization and analysis of clusters based on UMAP coordinates.
cds@clusters$UMAP$clusters <- lsit_cluster
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
# Get Marker and save file
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep8_.rds")
clustree_resolution = 0.15
A2780S <- FindClusters(object = A2780S.F, resolution = clustree_resolution, n.start = 100) #res select from clustree
A2780S.markers <- FindAllMarkers(A2780S, min.pct = 0.25, logfc.threshold = 0.25)
saveRDS(A2780S.markers, "/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_marker.rds")
# Get marker into data frame
A2780S_marker <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_marker.rds")
marker_matrix <- as.data.frame(A2780S_marker)
# Get cell meta data
A2780S_meta <- A2780S@meta.data
# Unprocess data load
Unprocess_data <- readRDS("/Users/fin/Desktop/A2780S/Unprocessed_data/A2780S-CT_S+R_UnprocessedCohort_SeuratObj_.rds")
Unprocess_data <- Unprocess_data@meta.data
# Get Cell expression data
A2780S_expression <- read.csv("/Users/fin/Desktop/A2780S/Trajectory/CORRECTcountmatrix.csv")
# Create Seurant Object
seu.obj <- CreateSeuratObject(counts = A2780S_expression)
# convert seurant obj to cell_data_set (cds) object for monocle3
cds <- as.cell_data_set(A2780S)
#https://training.galaxyproject.org/training-material/topics/single-cell/tutorials/scrna-case_monocle3-rstudio/tutorial.html#trajectory-inference
# Create a uniform partition label for all cells
reacreate.partition <- rep(1, length(cds@colData@rownames))
names(reacreate.partition) <- rownames(cds@colData)
reacreate.partition <- as.factor(reacreate.partition)
# Update the cds object with the new partition label
# Check if the structure of your object supports this assignment
cds@clusters$UMAP$partitions <- reacreate.partition
lsit_cluster <- A2780S@active.ident # This retrieves the active identity classes (clusters)
# Assign cluster labels from 'lsit_cluster' to the UMAP cluster information slot within the 'cds' object.
# This integrates clustering results directly with the UMAP dimensionality reduction in the 'cds' data structure,
# allowing for enhanced visualization and analysis of clusters based on UMAP coordinates.
cds@clusters$UMAP$clusters <- lsit_cluster
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
A2780S@reductions$umap
# Get Marker and save file
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep8_.rds")
A2780S <- FindClusters(object = A2780S.F, resolution = clustree_resolution, n.start = 100) #res select from clustree
A2780S.markers <- FindAllMarkers(A2780S, min.pct = 0.25, logfc.threshold = 0.25)
saveRDS(A2780S.markers, "/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_marker.rds")
# Get marker into data frame
A2780S_marker <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_marker.rds")
marker_matrix <- as.data.frame(A2780S_marker)
# Get cell meta data
A2780S_meta <- A2780S@meta.data
# Unprocess data load
Unprocess_data <- readRDS("/Users/fin/Desktop/A2780S/Unprocessed_data/A2780S-CT_S+R_UnprocessedCohort_SeuratObj_.rds")
Unprocess_data <- Unprocess_data@meta.data
# Get Cell expression data
A2780S_expression <- read.csv("/Users/fin/Desktop/A2780S/Trajectory/CORRECTcountmatrix.csv")
# Create Seurant Object
seu.obj <- CreateSeuratObject(counts = A2780S_expression)
# convert seurant obj to cell_data_set (cds) object for monocle3
cds <- as.cell_data_set(A2780S)
#https://training.galaxyproject.org/training-material/topics/single-cell/tutorials/scrna-case_monocle3-rstudio/tutorial.html#trajectory-inference
# Create a uniform partition label for all cells
reacreate.partition <- rep(1, length(cds@colData@rownames))
names(reacreate.partition) <- rownames(cds@colData)
reacreate.partition <- as.factor(reacreate.partition)
# Update the cds object with the new partition label
# Check if the structure of your object supports this assignment
cds@clusters$UMAP$partitions <- reacreate.partition
lsit_cluster <- A2780S@active.ident # This retrieves the active identity classes (clusters)
# Assign cluster labels from 'lsit_cluster' to the UMAP cluster information slot within the 'cds' object.
# This integrates clustering results directly with the UMAP dimensionality reduction in the 'cds' data structure,
# allowing for enhanced visualization and analysis of clusters based on UMAP coordinates.
cds@clusters$UMAP$clusters <- lsit_cluster
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
umap_folder_name <- "UMAP"
# Construct the full path for the UMAP folder
umap_folder_path <- file.path(base_dir, umap_folder_name)
# Create the UMAP folder if it doesn't exist
if (!dir.exists(umap_folder_path)) {
dir.create(umap_folder_path, recursive = TRUE)
}
# Read the Seurat object
A2780S.F <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep7_.rds") # Ensure full_rds_path is correctly defined earlier in your script
# Find Clusters at a specific resolution
clustree_resolution = 0.15
A2780S <- FindClusters(object = A2780S.F, resolution = clustree_resolution, n.start = 100) #res select from clustree
# Find all markers
A2780S.markers <- FindAllMarkers(A2780S, min.pct = 0.25, logfc.threshold = 0.25)
# Run UMAP with PCA reduction and specified dimensions
A2780S <- RunUMAP(object = A2780S, reduction = "pca", dims = 1:50)
# Generate and save UMAP plot by cluster
pdf_path_cluster <- file.path(umap_folder_path, paste0("A2780S_S+R_QC-Subset-Cohort_UMAP_byCluster_",clustree_resolution, ".pdf"))
pdf(pdf_path_cluster, width=12, height=8)
dPlot <- DimPlot(A2780S, reduction = "umap") + xlim(-15, 15) + ylim(-15, 15)
print(dPlot)
dev.off()
# Generate and save UMAP plot by cell type
pdf_path_celltype <- file.path(umap_folder_path, paste0("A2780S_S+R_QC-Subset-Cohort_UMAP_clustersByType_", ".pdf"))
pdf(pdf_path_celltype, width=12, height=8)
dPlot <- DimPlot(A2780S, reduction = "umap", group.by = 'orig.ident') + xlim(-15, 15) + ylim(-15, 15)
print(dPlot)
dev.off()
# Save the modified Seurat object
rds_path <- file.path(process_data_folder_path, paste0("A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep8_", ".rds"))
saveRDS(A2780S, file = rds_path)
DimPlot(A2780S, reduction = "umap")
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
lsit_cluster <- A2780S@active.ident # This retrieves the active identity classes (clusters)
# Assign cluster labels from 'lsit_cluster' to the UMAP cluster information slot within the 'cds' object.
# This integrates clustering results directly with the UMAP dimensionality reduction in the 'cds' data structure,
# allowing for enhanced visualization and analysis of clusters based on UMAP coordinates.
cds@clusters$UMAP$clusters <- lsit_cluster
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
A2780S@reductions$
knitr::opts_chunk$set(echo = TRUE)
library(future) #simple and uniform way of evaluating R expressions
library(ggplot2) #plotting library
library(bigmemory)#manipulation of big objects
library(Seurat) #seurat library
library(clustree)
library(dplyr)
library(monocle3)
library(SeuratWrappers)
# convert seurant obj to cell_data_set (cds) object for monocle3
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep8_.rds")
# Get Marker and save file
A2780S <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_thruStep8_.rds")
A2780S.markers <- FindAllMarkers(A2780S, min.pct = 0.25, logfc.threshold = 0.25)
saveRDS(A2780S.markers, "/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_marker.rds")
# Get marker into data frame
A2780S_marker <- readRDS("/Users/fin/Desktop/A2780S/Process_data/A2780S_S+R_QC-Subset-Cohort_SeuratObj_marker.rds")
marker_matrix <- as.data.frame(A2780S_marker)
# Get cell meta data
A2780S_meta <- A2780S@meta.data
# Unprocess data load
Unprocess_data <- readRDS("/Users/fin/Desktop/A2780S/Unprocessed_data/A2780S-CT_S+R_UnprocessedCohort_SeuratObj_.rds")
Unprocess_data <- Unprocess_data@meta.data
# Get Cell expression data
A2780S_expression <- read.csv("/Users/fin/Desktop/A2780S/Trajectory/CORRECTcountmatrix.csv")
# Create Seurant Object
seu.obj <- CreateSeuratObject(counts = A2780S_expression)
# convert seurant obj to cell_data_set (cds) object for monocle3
cds <- as.cell_data_set(A2780S)
#https://training.galaxyproject.org/training-material/topics/single-cell/tutorials/scrna-case_monocle3-rstudio/tutorial.html#trajectory-inference
# Create a uniform partition label for all cells
reacreate.partition <- rep(1, length(cds@colData@rownames))
names(reacreate.partition) <- rownames(cds@colData)
reacreate.partition <- as.factor(reacreate.partition)
# Update the cds object with the new partition label
# Check if the structure of your object supports this assignment
cds@clusters$UMAP$partitions <- reacreate.partition
lsit_cluster <- A2780S@active.ident # This retrieves the active identity classes (clusters)
# Assign cluster labels from 'lsit_cluster' to the UMAP cluster information slot within the 'cds' object.
# This integrates clustering results directly with the UMAP dimensionality reduction in the 'cds' data structure,
# allowing for enhanced visualization and analysis of clusters based on UMAP coordinates.
cds@clusters$UMAP$clusters <- lsit_cluster
# Assign UMAP coordinate - cell embedding
cds@int_colData@listData$reducedDims$UMAP <- A2780S@reductions$umap@cell.embeddings
cds <- learn_graph(cds, use_partition = FALSE)
plot_cells(cds,
color_cells_by = 'orig.ident',
label_groups_by_cluster = FALSE,
label_branch_points = FALSE,
label_roots =FALSE,
label_leaves = FALSE,
group_label_size = 5)
cds <- order_cells(cds, reduction_method = 'UMAP', root_cells = colnames(cds[,clusters(cds) == 0])) #input start cluster from prior knowledge
plot_cells(cds,
color_cells_by = 'pseudotime',
label_groups_by_cluster = FALSE,
label_branch_points = FALSE,
label_roots = FALSE,
label_leaves = FALSE)
## Cells ordered by monocle3 pseudotime
A2780S$pseudotime <- pseudotime(cds)
Idents(A2780S) <- A2780S$seurat_clusters
FeaturePlot(A2780S, features = "pseudotime", label = T)
cluster.before.trajectory <- plot_cells(cds,
color_cells_by = 'seurat_clusters',
label_groups_by_cluster = FALSE,
group_label_size = 5) + theme(legend.position = 'right')
cluster.names <- plot_cells(cds,
color_cells_by = 'orig.ident',
label_groups_by_cluster = FALSE,
group_label_size = 5) + theme(legend.position = 'right')
cluster.before.trajectory | cluster.names
